import Head from "next/head";
import { Inter } from "@next/font/google";
import styles from "../styles/Home.module.css";
import { Textarea } from "../components/textarea";
import { useEffect, useMemo, useState } from "react";
import { Button } from "../components/button";
import localforage from "localforage";
import * as ed from "@noble/ed25519";
import * as ethers from "ethers";
import { JsonViewer } from "@textea/json-viewer";

import { preprocessJson } from "../helpers/preprocessor";
import { format } from "path";


interface JSON_EL {
    value: string;
    ticked: boolean;
}

interface JSON_STORE {
    [key: string]: JSON_EL;
}


export default function Home() {
    const [jsonText, setJsonText] = useState<string>("");
    const [isLoading, setIsLoading] = useState<boolean>(false);
    const [hasKeypair, setHasKeypair] = useState<boolean>(false);
    const [formattedJSON, setFormattedJSON] = useState<string | undefined>(undefined);
    const [JsonDataStore, setJsonDataStore] = useState<JSON_STORE>({});

    const setKeyInDataStore = (key: string, state: boolean) => {
        let newJson = {...JsonDataStore};
        if (newJson[key]) newJson[key].ticked = state;
        setJsonDataStore(newJson);
    }
    
    const handleCheckmarkCheck = (event, key: string) => {
        setKeyInDataStore(key, event.target.checked);
    };
    
    const [json, setJson] = useState({});

    useEffect(() => {
        try {
            setJson(JSON.parse(jsonText));
            console.log(JSON.parse(jsonText));
        }
        catch(err) {
            console.log("not a json");
        }
    }, [jsonText]);

    useEffect(() => {
        async function checkIsRegistered() {
            const maybePrivKey = await localforage.getItem("zkattestorPrivKey");
            const maybePubKey = await localforage.getItem("zkattestorPubKey");
            if (maybePrivKey && maybePubKey) {
                setHasKeypair(true);
            } else {
                setIsLoading(true);
                const privKey = ed.utils.randomPrivateKey();
                const publicKey = await ed.getPublicKey(privKey);
                await localforage.setItem("zkattestorPrivKey", privKey);
                await localforage.setItem("zkattestorPubKey", publicKey);
                setIsLoading(false);
            }
        }
        checkIsRegistered();
    }, []);

    const signJSON = async () => {
        const privateKey = await localforage.getItem("zkattestorPrivKey");
        const newFormattedJSON = JSON.stringify(JSON.parse(jsonText));
        setFormattedJSON(newFormattedJSON);

        // Populate JSON_STORE with data from JSON.parse(jsonText);
        let newJsonDataStore: JSON_STORE = {};
        let parsedJson = JSON.parse(jsonText);
        Object.keys(parsedJson).forEach((key) => {
            newJsonDataStore[key] = {
                value: parsedJson[key],
                ticked: false
            }
        })
        setJsonDataStore(newJsonDataStore);

        const signature = await ed.sign(ethers.utils.toUtf8Bytes(newFormattedJSON), privateKey as string);
    };

    console.log(JsonDataStore);

    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className={styles.main}>
                <div className={styles.center}>
                    <h1 className="py-4">zkAttestor</h1>
                </div>

                <div style={{ width: "800px" }} className="flex flex-col justify-center items-center">
                    {!hasKeypair ? (
                        "generating your key pair..."
                    ) : (
                        <div className="w-full flex flex-col items-center justify-center">
                            <Textarea
                                placeholder={"Paste your JSON string"}
                                value={jsonText}
                                onChangeHandler={setJsonText}
                            />
                            <div className="py-4"></div>
                            <Button backgroundColor="black" color="white" onClickHandler={signJSON}>
                                {isLoading ? "loading..." : "Sign JSON"}
                            </Button>
                        </div>
                    )}

                    {formattedJSON ? (
                        <>
                            <div className="py-2"></div>
                            <JsonViewer value={formattedJSON} />
                        </>
                    ) : null}
                    <br/>

                    <p className="mb-2">Select JSON elements to reveal in ZK-proof</p>

                    <ul>
                        <>
                            {
                                Object.keys(JsonDataStore).map(
                                    (key) => {
                                        return <>
                                            <p key={key}>
                                                <label className="inline-flex items-center ml-6">
                                                    <input 
                                                        type="checkbox"
                                                        className="mr-4 pt-2 form-checkbox h-4 w-4 text-indigo-600 transition duration-150 ease-in-out"
                                                        onChange={ (e) => handleCheckmarkCheck(e, key) }
                                                        checked={ JsonDataStore[key] ? JsonDataStore[key].ticked: false}
                                                    />
                                                </label>
                                                <strong className="mb-4">{key}:</strong> {JsonDataStore[key]['value']}
                                            </p>
                                        </>
                                    }
                                )
                            }
                        </>
                    </ul>
                    {/* This should build the circuit, and 'attest' to certain values of the JSON */}
                    <Button backgroundColor="black" color="white" onClickHandler={signJSON}>
                        {isLoading ? "loading..." : "Build Circuit & Generate Proof"}
                    </Button>
                </div>
            </main>
        </>
    );
}



